# Claude Code Configuration Template - Environment Variables

# ============================================
# Autonomy Mode
# ============================================

# Agent autonomy level - controls autonomous execution behavior
# Options: low, medium, high
# - low: Hooks suggest actions, no auto-execution
# - medium: Auto-fix minor issues (formatting, linting)
# - high: Full autonomous agent chaining, no permission requests
# Default: high (recommended for continuous development)
AUTONOMY_LEVEL=high

# Auto-invoke agents after code changes (requires high autonomy)
# Default: true
AUTO_REVIEW=true

# Auto-commit after successful quality gates (requires high autonomy)
# Default: false (recommended to keep manual control)
AUTO_COMMIT=false

# Auto-deploy after tests pass (requires high autonomy)
# Default: false (recommended to keep manual control)
AUTO_DEPLOY=false

# ============================================
# Safe Parallel Execution
# ============================================

# Enable controlled parallel execution with memory safety (p-limit N=2)
# Default: false (sequential only - safest but slower)
# Set to 'true' to enable parallel execution with memory checks
SAFE_PARALLEL=false

# Memory threshold for parallel execution (MB)
# If current memory exceeds this, falls back to sequential
# Default: 4096 (4GB)
MEMORY_THRESHOLD=4096

# Maximum concurrent agent executions
# Only applies when SAFE_PARALLEL=true
# Default: 2 (conservative for memory safety)
# Options: 1 (sequential), 2 (recommended), 3 (risky)
CONCURRENCY_LIMIT=2

# ============================================
# Memory Management
# ============================================

# Memory limit for memory-guard hook (MB)
# Blocks requests if memory exceeds this threshold
# Default: 6144 (6GB)
CLAUDE_MEMORY_LIMIT_MB=6144

# Context warning thresholds (%)
# Default: 60, 70, 80
CLAUDE_WARN_60=60
CLAUDE_WARN_70=70
CLAUDE_WARN_80=80

# ============================================
# Node.js Options
# ============================================

# Enable garbage collection and set heap size
# Recommended: --expose-gc --max-old-space-size=8192
# Add to ~/.zshrc or ~/.bashrc:
#   export NODE_OPTIONS="--expose-gc --max-old-space-size=8192"

# ============================================
# Usage Examples
# ============================================

# Example 1: Enable safe parallel (recommended for fast, stable execution)
# SAFE_PARALLEL=true
# CONCURRENCY_LIMIT=2
# MEMORY_THRESHOLD=4096

# Example 2: Force sequential (safest, slower)
# SAFE_PARALLEL=false

# Example 3: Aggressive parallel (risky, fastest)
# SAFE_PARALLEL=true
# CONCURRENCY_LIMIT=3
# MEMORY_THRESHOLD=3072

# ============================================
# Notes
# ============================================

# Safe Parallel Mode:
# - Uses p-limit to control concurrency (N=2 by default)
# - Checks memory before each batch
# - Falls back to sequential if memory high
# - Forces GC between batches
# - 30% faster than sequential, 95% as stable

# Sequential Mode (default):
# - One agent at a time
# - 100% stable
# - 3x slower than parallel
# - Recommended for production

# When to use Safe Parallel:
# - Development environments
# - Systems with 16GB+ RAM
# - Tasks with independent agents (code review, testing)
# - Can tolerate occasional fallback to sequential

# When to use Sequential:
# - Production environments
# - Systems with 8GB RAM
# - Critical stability requirements
# - Long-running sessions (10+ agents)
