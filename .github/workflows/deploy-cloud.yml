# ============================================================================
# SaaS X-Ray Cloud Deployment Workflow
# Automated deployment to Supabase + Vercel multi-environment architecture
# ============================================================================

name: Cloud Deployment

on:
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'demo'
        type: choice
        options:
          - demo
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

  # Automatic deployment triggers
  push:
    branches:
      - main  # Deploy to demo environment
      - staging  # Deploy to staging environment
      - production  # Deploy to production environment

  # Pull request validation (demo environment only)
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # Determine Environment
  # ============================================================================
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=demo" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=demo" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          else
            echo "environment=demo" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # Build and Test
  # ============================================================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: determine-environment
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: saas_xray_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build:shared-types

      - name: TypeScript type checking
        run: |
          cd backend && npm run verify:types
          cd ../frontend && npm run type-check

      - name: Lint code
        run: |
          cd backend && npm run lint
          cd ../frontend && npm run lint

      - name: Run backend tests
        if: ${{ !github.event.inputs.skip_tests }}
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:password@localhost:5432/saas_xray_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: |
          cd backend
          npm run test:ci

      - name: Run frontend tests
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          cd frontend
          npm test

      - name: Build frontend
        env:
          NODE_ENV: production
          VITE_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.environment }}
          path: |
            frontend/dist/
            backend/dist/
          retention-days: 1

  # ============================================================================
  # Deploy to Supabase
  # ============================================================================
  deploy-supabase:
    name: Deploy to Supabase
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Setup environment variables
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            "demo")
              echo "SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_DEMO_PROJECT_REF }}" >> $GITHUB_ENV
              echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
              ;;
            "staging")
              echo "SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_STAGING_PROJECT_REF }}" >> $GITHUB_ENV
              echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
              ;;
            "production")
              echo "SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_PRODUCTION_PROJECT_REF }}" >> $GITHUB_ENV
              echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Link Supabase project
        run: supabase link --project-ref $SUPABASE_PROJECT_REF

      - name: Deploy database migrations
        run: supabase db push

      - name: Deploy Edge Functions
        run: supabase functions deploy

      - name: Verify Supabase deployment
        run: |
          # Basic health check of deployed functions
          curl -f "${{ secrets.SUPABASE_URL }}/functions/v1/api/health" || exit 1

  # ============================================================================
  # Deploy to Vercel
  # ============================================================================
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-supabase]
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.environment }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            "demo")
              vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
              ;;
            "staging")
              vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
              ;;
            "production")
              vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
              ;;
          esac

      - name: Build project artifacts
        env:
          VITE_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          # Set environment-specific variables
          case "${{ needs.determine-environment.outputs.environment }}" in
            "demo")
              export VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL_DEMO }}
              export VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_DEMO }}
              export VITE_FRONTEND_URL=https://demo.saasxray.com
              ;;
            "staging")
              export VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL_STAGING }}
              export VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_STAGING }}
              export VITE_FRONTEND_URL=https://staging.saasxray.com
              ;;
            "production")
              export VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL_PRODUCTION }}
              export VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY_PRODUCTION }}
              export VITE_FRONTEND_URL=https://app.saasxray.com
              ;;
          esac

          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            "demo")
              vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --alias demo.saasxray.com
              ;;
            "staging")
              vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --alias staging.saasxray.com
              ;;
            "production")
              vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --alias app.saasxray.com
              ;;
          esac

  # ============================================================================
  # Post-Deployment Verification
  # ============================================================================
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-vercel]
    if: needs.determine-environment.outputs.deploy == 'true'

    steps:
      - name: Wait for deployment propagation
        run: sleep 30

      - name: Verify deployment
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            "demo")
              BASE_URL="https://demo.saasxray.com"
              ;;
            "staging")
              BASE_URL="https://staging.saasxray.com"
              ;;
            "production")
              BASE_URL="https://app.saasxray.com"
              ;;
          esac

          echo "Testing frontend: $BASE_URL"
          curl -f -s "$BASE_URL" > /dev/null

          echo "Testing API health: $BASE_URL/api/health"
          curl -f -s "$BASE_URL/api/health" | jq '.data.status' | grep -q "healthy"

          echo "✅ Deployment verification successful"

      - name: Create deployment summary
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            "demo")
              DEPLOYMENT_URL="https://demo.saasxray.com"
              ;;
            "staging")
              DEPLOYMENT_URL="https://staging.saasxray.com"
              ;;
            "production")
              DEPLOYMENT_URL="https://app.saasxray.com"
              ;;
          esac

          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Deployment Successful

          **Environment:** ${{ needs.determine-environment.outputs.environment }}
          **Deployment URL:** [$DEPLOYMENT_URL]($DEPLOYMENT_URL)
          **Commit:** \`${{ github.sha }}\`
          **Triggered by:** ${{ github.event_name }}

          ## Services Deployed
          - ✅ Supabase Database & Edge Functions
          - ✅ Vercel Frontend Application
          - ✅ Post-deployment verification passed

          ## Quick Links
          - [Application]($DEPLOYMENT_URL)
          - [API Health]($DEPLOYMENT_URL/api/health)
          - [Repository](https://github.com/${{ github.repository }})
          EOF

  # ============================================================================
  # Notify on Failure
  # ============================================================================
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-supabase, deploy-vercel, verify-deployment]
    if: failure() && needs.determine-environment.outputs.deploy == 'true'

    steps:
      - name: Create failure summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ❌ Deployment Failed

          **Environment:** ${{ needs.determine-environment.outputs.environment }}
          **Commit:** \`${{ github.sha }}\`
          **Triggered by:** ${{ github.event_name }}

          ## Failed Jobs
          $(echo '${{ toJson(needs) }}' | jq -r 'to_entries[] | select(.value.result == "failure") | "- ❌ " + .key')

          Please check the workflow logs for detailed error information.
          EOF