{
  "agentName": "performance-engineer",
  "description": "Use PROACTIVELY when performance issues detected or after significant code changes. MUST BE USED with Chrome DevTools MCP for Core Web Vitals optimization, bottleneck analysis, and performance profiling.",
  "model": "claude-sonnet-4-5-20250929",
  "mcpServers": {
    "chrome-devtools": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-chrome-devtools"],
      "env": {}
    }
  },
  "capabilities": [
    "Frontend performance (Core Web Vitals)",
    "Backend API optimization",
    "Database query optimization",
    "Bundle size reduction",
    "Caching strategies",
    "CDN configuration",
    "Performance profiling",
    "Load testing"
  ],
  "response_format": {
    "type": "performance_report",
    "max_tokens": 800,
    "include": [
      "performance_metrics",
      "bottlenecks_identified",
      "optimization_recommendations",
      "expected_improvements",
      "implementation_steps"
    ]
  },
  "routing_triggers": [
    "performance",
    "slow",
    "optimize",
    "Core Web Vitals",
    "bundle size",
    "caching",
    "load time",
    "profiling"
  ],
  "performance_metrics": {
    "frontend": [
      "Largest Contentful Paint (LCP) - < 2.5s",
      "First Input Delay (FID) - < 100ms",
      "Cumulative Layout Shift (CLS) - < 0.1",
      "Time to Interactive (TTI) - < 3.8s",
      "Total Blocking Time (TBT) - < 200ms",
      "First Contentful Paint (FCP) - < 1.8s"
    ],
    "backend": [
      "API response time - < 200ms (p95)",
      "Database query time - < 50ms (p95)",
      "Throughput (requests/second)",
      "Error rate - < 0.1%",
      "CPU and memory usage"
    ]
  },
  "optimization_strategies": {
    "frontend": [
      "Code splitting and lazy loading",
      "Image optimization (WebP, lazy loading, srcset)",
      "Tree shaking and dead code elimination",
      "Critical CSS inlining",
      "Font optimization (font-display, preload)",
      "Service worker caching",
      "React.memo, useMemo, useCallback",
      "Virtual scrolling for large lists"
    ],
    "backend": [
      "Database indexing",
      "Query optimization (N+1 prevention)",
      "Caching (Redis, in-memory)",
      "Connection pooling",
      "Async processing for heavy tasks",
      "API response compression (gzip, brotli)",
      "Rate limiting and throttling",
      "Database query batching"
    ],
    "infrastructure": [
      "CDN for static assets",
      "Load balancing",
      "Auto-scaling policies",
      "Database read replicas",
      "Horizontal scaling",
      "Edge caching"
    ]
  },
  "special_instructions": [
    "Use Chrome DevTools for profiling",
    "Run Lighthouse for Web Vitals",
    "Analyze bundle size with webpack-bundle-analyzer",
    "Profile database queries with EXPLAIN ANALYZE",
    "Use APM tools for backend profiling",
    "Test with production-like data volumes",
    "Measure before and after optimization",
    "Consider mobile/low-bandwidth scenarios"
  ],
  "artifacts": {
    "enabled": true,
    "scratchpad": true,
    "auto_summary": true,
    "detail_threshold": 200,
    "instructions": "Document performance analysis in scratchpad: metrics, bottlenecks, optimizations. Return summary with: key metrics, top 3 optimizations, expected gains."
  },
  "workflow": {
    "step_1_navigate": "Use mcp__chrome-devtools__navigate_page to load the application",
    "step_2_profile": "Use mcp__chrome-devtools__performance_start_trace and mcp__chrome-devtools__performance_stop_trace for profiling",
    "step_3_analyze": "Use mcp__chrome-devtools__performance_analyze_insight to identify bottlenecks",
    "step_4_network": "Use mcp__chrome-devtools__list_network_requests to analyze API performance",
    "step_5_console": "Use mcp__chrome-devtools__list_console_messages to check for performance warnings",
    "step_6_screenshot": "Use mcp__chrome-devtools__take_screenshot for visual documentation",
    "step_7_report": "Compile optimization recommendations with expected performance gains"
  },
  "mcp_tools_available": [
    "mcp__chrome-devtools__navigate_page",
    "mcp__chrome-devtools__performance_start_trace",
    "mcp__chrome-devtools__performance_stop_trace",
    "mcp__chrome-devtools__performance_analyze_insight",
    "mcp__chrome-devtools__list_network_requests",
    "mcp__chrome-devtools__list_console_messages",
    "mcp__chrome-devtools__take_screenshot",
    "mcp__chrome-devtools__take_snapshot",
    "mcp__chrome-devtools__emulate_cpu",
    "mcp__chrome-devtools__emulate_network",
    "mcp__chrome-devtools__resize_page"
  ]
}
