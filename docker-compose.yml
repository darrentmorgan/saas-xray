services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: saas_xray
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d saas_xray"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/saas_xray
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      PORT: 4201
      FRONTEND_URL: http://localhost:4200
      CORS_ORIGIN: http://localhost:4200
      JWT_SECRET: dev-jwt-secret-key
      ENCRYPTION_KEY: dev-encryption-key-32-characters
    ports:
      - "4201:4201"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: http://localhost:4201/api
      VITE_WS_URL: ws://localhost:4201
      VITE_APP_NAME: SaaS X-Ray
    ports:
      - "4200:4200"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/saas_xray
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      FRONTEND_URL: http://localhost:4200
      CORS_ORIGIN: http://localhost:4200
      JWT_SECRET: dev-jwt-secret-key
      ENCRYPTION_KEY: dev-encryption-key-32-characters
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run worker

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: saas_xray_network